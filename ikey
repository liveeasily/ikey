#!/usr/bin/env python

import argparse
import subprocess
import os

parser = argparse.ArgumentParser(description='Inject key utility')
parser.add_argument('-t', '--top',
    help='the top of android source tree(default:$ANDROID_BUILD_TOP)',
    dest='top')
parser.add_argument('-k', '--keycode', help='key code number to inject',
                    dest='keycode', type=int)
parser.add_argument('-s', '--search', help='keyword to search keyevent code',
                    dest='keyword')
args = parser.parse_args()

KEY_EVENT_JAVA = "frameworks/base/core/java/android/view/KeyEvent.java"

def inject_key(keycode):
    cmd = "adb shell input keyevent %d" % keycode
    print cmd
    os.system(cmd)

def get_topdir():
    if args.top != None:
        return os.path.abspath(args.top)

    topdir = os.getenv("ANDROID_BUILD_TOP")
    if topdir != None:
        return os.path.abspath(topdir)
    else:
        return None

def parse_keycodes(topdir, keyword):
    # print "parse_keycodes: topdir=%s, keyworkd=%s" %(topdir, keyword)
    if keyword is None:
        keyword = ''

    import re
    reg = 'KEYCODE_.*%s.*\s*=\s*[0-9]+' % keyword
    #print 'pattern=', reg
    pattern = re.compile(reg, re.I)

    keycode_map = {}
    filename = "%s/%s" % (topdir, KEY_EVENT_JAVA)
    file = open(filename, "r")
    for line in file:
        result = pattern.findall(line)
        if result:
            codename, keycode = result[0].split('=')
            keycode_map[codename.strip()] = keycode.strip()
    return keycode_map

def sort_keycode_map(map):
    import collections
    return collections.OrderedDict(sorted(map.items()))

def print_keycode_map(map):
    for key, val in map.items():
        print key, '-->', val

def main():
    keycode = args.keycode
    if keycode != None:
        inject_key(keycode)
        exit(0)

    topdir = get_topdir()
    if topdir == None:
        print "Couldn't know the top of android source tree."
        parser.print_help()
        exit(-1)

    print "topdir=[%s]" % topdir

    kmap = parse_keycodes(topdir, args.keyword)
    sorted_keycode_map = sort_keycode_map(kmap)
    print_keycode_map(sorted_keycode_map)

if __name__ == '__main__':
    main()

